org.springframework.beans.factory.support.AbstractBeanFactory.transformedBeanName
通过name获得beanName,不是用name直接作为beanName主要有两个原因
1、name可能会以&开头，表示调用者想获得FactoryBean本身，而不是FactoryBean生产出来的bean。
   在BeanFactory的beanDefinitionMap中，FactoryBean以<beanName,bean>的格式存储，而beanName不含有&字符。
   因此需要将&从name中移除，才能获取到bean
2、别名问题，@AliasFor
3、对name的合法性验证
beanName与beanDefinition
在beanDefinitionMap中，存着beanName-->beanDefinitionMap,为什么beanName不存在beanDefinition中呢？
beanDefinition中存着class的相关信息，而beanName不属于class的信息，它需要通过生成策略(transformedBeanName)生成出来

beanDefinitionHolder的作用：其实没什么用，为了别名，@AliasFor，对beanDefinition做了个封装
beanDefinition没有name，但是beanDefinitionMap是name-->beanDefinition
这个name(alias)就是存在beanDefinitionHolder中的

org.springframework.context.support.AbstractApplicationContext#finishBeanFactoryInitialization
其中调用preInstantiateSingletons方法，先验证beanDefinition（是否单例，是否懒加载，等等）
验证通过后，调用getBean实例化单例bean

org.springframework.beans.factory.support.AbstractBeanFactory#transformedBeanName
验证bean的name是否合法

org.springframework.beans.factory.support.AbstractBeanFactory#resolveBeanClass
从beanDefinition对象中获取bean的类型

@autowired和autowiring的区别 https://www.jianshu.com/p/3c7e0608ff1f

spring在createBean中9次执行后置处理器（后置处理器可以插手bean的实例化、初始化过程）
1、实例化之前
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation
	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInstantiation
		org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation
        /*
        spring的内部实现类是：AnnotationAwareAspectJAutoProxyCreator（继承AbstractAutoProxyCreator）
        beforeInstantiationResolved：记录beanPostProcessor过程是否已经开始
        hasInstantiationAwareBeanPostProcessors：在org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors时注册
        getCacheKey：获得class，处理factoryBean（判断是否需要加上&）
        advisedBeans：不需要被代理的类（切面类等，advisedBeans.put(class，false)），或者已经被代理的类（被代理了就会在advisedBeans记录下来,advisedBeans.put(class，true)）
                      这里也解释了在循环依赖aop提前时，后续不会再被aop
                      提前代理时，被代理的bean被记录进advisedBeans，后续走到代理的生命周期时，会判断advisedBeans，因此不会再次代理
        */
	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsAfterInitialization
		org.springframework.beans.factory.config.BeanPostProcessor#postProcessAfterInitialization
2、推断构造函数（由后置处理器决定访问哪些构造方法）
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance
    /**
    args:ac.getBean(beanName/beanClass,args),作用是作为实例化bean的填充属性。
         例如，Fyx有一个Gy属性，可以将gy=new Gy()当作args
    resolved:表示创建对象的构造方法是否被解析过（快捷方式，主要用于原型对象的创建，不用重复推断构造方法）
    autowireNecessary:表示是否使用有参构造器
    resolvedConstructorOrFactoryMethod:表示创建对象的方法，找到之后被存起来
    */
    org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#determineConstructorsFromBeanPostProcessors
	    org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor#determineCandidateConstructors
	        org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#determineCandidateConstructors
	        /**
	        lookupMethodsChecked:表示已经经过了lookup检查的bean的集合，不代表是不是lookup，只是检查过了
	        candidateConstructorsCache:已经推断出来构造方法的类的map，beanClass->constructor，不用重复推断，提高效率
	                                   这个场景非常特殊，单例或者多例都不会进到这个地方来
	                                   这个场景就是：
	                                   @Bean的方法中调用另一个@Bean的方法，而配置类又没有加@Configuration，导致创建两次，这个缓存就有用了
	        autowiredAnnotationTypes:@Autowired和@Value,org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.findAutowiredAnnotation
	        requiredConstructor:加了@Autowired或者@Value的构造方法
	        defaultConstructor:默认构造方法
	        primaryConstructor:kotlin相关的，对于java场景下没用，基本为空
	        explicitArgs:手动传的参数，getBean的时候传参数，创建bean的时候很少传参数
	        resolvePreparedArguments:解析参数，<property name="markerInterface" value="org.ezca.autocount.dao.CertRegionMapper"/>
	                                 例如，markerInterface要把org.ezca.autocount.dao.CertRegionMapper从字符串解析成类
            chosenCtors:第一次推断出来的构造函数
                        当第一次提供多个构造方法，加了多个@Autowired(false)时，会推断出多个构造方法，此时，相当于自动注入
                        boolean autowiring = (chosenCtors != null || mbd.getResolvedAutowireMode() == AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR);
            nonPublicAccessAllowed:是否允许访问非公共的方法
            hasConstructorArgumentValues:beanDefinition里面存的参数，xml的<constructor-ars>，或者dynamicBeanDefinition.getConstructorArgumentValues().addArgumentValues();
	        minNrOfArgs:最少的构造函数参数个数，例如getBean的args，beanDefinition存的参数
	        lenientConstructorResolution:是否采用宽松模式，即不能有模糊不清的构造函数，有的话就报错
	        resolvedValues:beanDefinition里面存的参数，赋值给了这个变量，为什么不直接用要赋值，不知道
	        supplier:类似于factory method
	        */
3、应用合并后的BeanDefinition
即把bd中需要注入的属性拿出来存到injectionMetadataCache中，在后续populateBean的时候注入
实时上，在applyMergedBeanDefinitionPostProcessors和populateBean中会调用同一个方法：findAutowiringMetadata
合并beanDefinition是在org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors
                     org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors
                     org.springframework.beans.factory.ListableBeanFactory.getBeanNamesForType中做的
实例化bean需要通过beanDefinition
首先是程序员注册的BeanDefinitionRegistryPostProcessor和spring开天辟地的类，在获取名字的时候合并
然后是扫描出来的bean，再次调用getBeanNamesForType进行合并，合并完成后存入mergedBeanDefinitions，后续实例化bean的时候直接从中取
    org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons
        org.springframework.beans.factory.support.AbstractBeanFactory.getBean(java.lang.String)
            org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean
                org.springframework.beans.factory.support.AbstractBeanFactory.markBeanAsCreated
                    org.springframework.beans.factory.support.AbstractBeanFactory.clearMergedBeanDefinition
                org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition
注意：扫描出来的bean合并beanDefinition之后，在getBean的时候会清除MergedBeanDefinition再次合并，因为beanPostProcessor可能会修改beanDefinition，因此需要重新合并
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyMergedBeanDefinitionPostProcessors
	org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor#postProcessMergedBeanDefinition
	    org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessMergedBeanDefinition
	        org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessMergedBeanDefinition
	        /**
            主要实现类有两个：CommonAnnotationBeanPostProcessor（@Resource）和AutowiredAnnotationBeanPostProcessor（@Autowired、@Value）
                             和一个不重要的
            org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessMergedBeanDefinition
            1、调用父类的postProcessMergedBeanDefinition
                org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.findLifecycleMetadata-->查找生命周期回调方法
            2、找到需要被注入的属性元信息（@Resource）
                org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.findResourceMetadata
            3、injectedElements赋值给checkedElements
                org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers
                检查一下externallyManagedConfigMembers有没有存当前的InjectedElements，没有就加进去（即检查过了），
                然后把injectedElements赋值给checkedElements，后续populateBean的时候，使用的是checkedElements
                也就是说njectedElements和checkedElements其实是一样的，不知道为什么有这么一步
            org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor
            1、找到需要被注入的属性元信息（@Autowired、@Value）
                org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.findAutowiringMetadata
	        2、injectedElements赋值给checkedElements
	            org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers
	        org.springframework.context.support.ApplicationListenerDetector.postProcessMergedBeanDefinition
	            this.singletonNames.put(beanName, beanDefinition.isSingleton());
	            仅仅是标记了一下单例对象的名字，所以说不重要
	        injectionMetadataCache：beanName-->InjectionMetadata
	        InjectionMetadata:targetClass、injectedElements、checkedElements
	        injectedElements、checkedElements:需要注入的元素（@Autowired，@Inject，@Resource）,injectedElement的集合
	        targetClass:需要被注入的类
	        */
4、解决循环引用，加入二级缓存时用的
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#getEarlyBeanReference
	org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor#getEarlyBeanReference
	    org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.getEarlyBeanReference
5、6、注入属性时
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#populateBean
	org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation（是否注入属性扩展点）
	org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor#postProcessPropertyValues（如果continueWithPropertyPopulation为true，注入属性）
	/**
	PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : null);
	pvs:<property/>或者dynamicBeanDefinition.getPropertyValues()提供的属性
	if (resolvedAutowireMode == AUTOWIRE_BY_NAME || resolvedAutowireMode == AUTOWIRE_BY_TYPE) {
        MutablePropertyValues newPvs = new MutablePropertyValues(pvs);
    newPvs:如果是自动注入，除了程序员提供的，spring还会自己推断，手动注入则不会有
	*/
7、8、初始化方法（生命周期回调方法， InitializingBean @PostConstructor）
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#initializeBean
    org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeAwareMethods（执行部分Aware，BeanNameAware、BeanClassLoaderAware、BeanFactoryAware）
	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInitialization
		org.springframework.beans.factory.config.BeanPostProcessor#postProcessBeforeInitialization（执行@PostConstruct、ApplicationContextAware）
	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsAfterInitialization（完成代理）
		org.springframework.beans.factory.config.BeanPostProcessor#postProcessAfterInitialization
		    org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#postProcessAfterInitialization
	注意：
	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#invokeInitMethods（执行InitializingBean）
9、销毁(@PreDestroy,DisposableBean)
CommonAnnotationBeanPostProcessor

如何把一个对象交给spring管理（第三方提供的bean可能沒有生命周期，lifecircle包做了以下情况的实验）
@bean（有） registerSingleton（沒有） factorybean（没有） factorymethod（静态工厂法（有）、实例工厂法（有））
registerSingleton：动态数据源，注射多个datasource时用到

如何产生一个对象
new 反射 clone 序列化

单例依赖多例的解决方法
ApplicationContextAware、@Lookup

lifecycle callback
1、bean的lifecycle callback(初始化、销毁)
@postConstructor --> initializingBean --> <init-method="">
2、spring容器的lifecycle callback（启动、销毁）
Lifecycle、SmartLifecycle

接口（多个实现）注入
xml手动装配、@Autowired属性名、@Qualifier

beanFactory的初始化
使用AnnotationConfigApplicationContext时，父类的构造方法会初始化beanFactory（DefaultListableBeanFactory）
而使用ClassPathXmlApplicationContext时，它的构造方法（包括父类）没有初始化beanFactory（DefaultListableBeanFactory）
而是在refresh()中初始化的（invokeBeanFactoryPostProcessors()之前的几个方法）
事实上，这几个方法对AnnotationConfigApplicationContext来说没什么用

spring策略模式：
1、ConfigurationClassPostProcessor执行BeanDefinitionRegistryPostProcessor的時候
2、@Autowired、@Resource的beanPostProcessor

beanPostProcessor可以干预实例化、初始化
beanFactoryPostProcessor只能干预初始化
